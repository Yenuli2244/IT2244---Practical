//01
#include<stdio.h>
#include<unistd.h>
int main(){
printf("\nHello World!");
int f=fork();
int p=getpid();
printf("\nthe pid is %d",p);
printf("\nfork number %d\n",f);
return 0;
}

//02
#include<stdio.h>
#include<unistd.h>
int main(){
fork();
printf("\nHello World!\n");

return 0;
}


//03
#include<stdio.h>
#include<unistd.h>
int main(){
printf("\nHello World!\n");
int f = fork();
if(f==0){
printf("\nI'm child process!\n");
}
else{
printf("\nI'm parent process\n");
}
return 0;
}


//04
#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>

int main(){
    int f = fork(); // create B

    if (f == 0) {
        // Only in B
        printf("\nI'm B\n");
        printf("My ppid: %d\n", getppid());
        printf("My pid: %d\n", getpid());
    } else {
        // Only in A
        int k = fork(); // create C
        if (k == 0) {
            // Only in C
            printf("\nI'm c\n");
            printf("My ppid: %d\n", getppid());
            printf("My pid: %d\n", getpid());
        } else {
            // Still A
            wait(NULL);
            wait(NULL);
            printf("\nI'm A\n");
            printf("My pid: %d\n", getpid());
        }
    }

    return 0;
}

